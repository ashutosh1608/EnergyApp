# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wGUyKEegXujB64NgJRu6K3oS_QJpXT4U
"""
from io import BytesIO

import matplotlib
import numpy as np
import pandas as pd
import os
import matplotlib.pyplot as plt

matplotlib.use('Agg')
import calendar
from matplotlib.backends.backend_pdf import PdfPages


def create_pivot(generation_path, consumption_path):
    data = pd.read_excel(generation_path)
    if 'Irradiance onto horizontal plane ' in data.columns:
        data.drop('Irradiance onto horizontal plane ', axis=1, inplace=True)

    def str_to_datetime(str):
        return pd.to_datetime(str, format='%d.%m. %H:%M')

    data['datetime'] = data['Time'].apply(str_to_datetime)
    data.drop('Time', axis=1, inplace=True)
    data.set_index('datetime', drop=True, inplace=True)
    data['date'] = data.index.date
    generation = pd.pivot_table(data, values='Generation', index='date', columns=data.index.hour)
    generation.fillna(0.0, inplace=True)
    data = pd.read_excel(consumption_path)
    data.set_index('Date', inplace=True)
    data.sort_index(ascending=True, inplace=True)
    consumption = data.copy()
    generation.index = consumption.index
    generation = generation.rename(columns=lambda x: x + 1)
    common_dates = consumption.index.intersection(generation.index)
    consumption = consumption.loc[common_dates]
    generation = generation.loc[common_dates]
    pivot = consumption - generation
    return pivot


def monthly_consumption(generation_path, consumption_path, charge_per_unit):
    cnsmptn = pd.read_excel(consumption_path)
    cnsmptn.set_index('Date', inplace=True)
    cnsmptn.sort_index(ascending=True, inplace=True)
    monthly_cnsmptn = cnsmptn.groupby([cnsmptn.index.year, cnsmptn.index.month]).sum()
    monthly_cnsmptn.index = pd.to_datetime([f"{year}-{month}-01" for year, month in monthly_cnsmptn.index])
    monthly_cnsmptn = monthly_cnsmptn.reindex(columns=cnsmptn.columns)
    monthly_cnsmptn['sum'] = monthly_cnsmptn.sum(axis=1)
    ogpivot = create_pivot(generation_path, consumption_path)

    def convert_negatives(x):
        if x < 0:
            return 0
        else:
            return x

    ogpivot = ogpivot.applymap(convert_negatives)
    monthly_sum = ogpivot.groupby([ogpivot.index.year, ogpivot.index.month]).sum()
    monthly_sum.index = pd.to_datetime([f"{year}-{month}-01" for year, month in monthly_sum.index])
    monthly_sum = monthly_sum.reindex(columns=ogpivot.columns)
    monthly_sum['sum'] = monthly_sum.sum(axis=1)
    pdf_bytes = BytesIO()
    pdf = PdfPages(pdf_bytes)
    plt.figure(figsize=(12, 8))
    X = list(calendar.month_name)[1:]
    wsolar = monthly_sum['sum']
    wosolar = monthly_cnsmptn['sum']
    X_axis = np.arange(len(X))
    plt.barh(X_axis - 0.2, wsolar, 0.4, label='consumption with solar')
    plt.barh(X_axis + 0.2, wosolar, 0.4, label='consumption without solar')
    plt.yticks(X_axis, X)
    plt.xlabel("Units")
    plt.ylabel("Months")
    plt.title("Consumption with and without solar")
    plt.legend()
    for i, (w1, w2) in enumerate(zip(wsolar, wosolar)):
        plt.text(w1 + 500, i - 0.2, str(round(w1, 2)), ha='left', va='center')
        plt.text(w2 + 500, i + 0.2, str(round(w2, 2)), ha='left', va='center')
    plt.xlim(0, max(max(wsolar), max(wosolar)) + 15000)
    plt.gca().invert_yaxis()
    # plt.show()
    pdf.savefig()
    plt.close()
    month_map = {
        1: 'January',
        2: 'February',
        3: 'March',
        4: 'April',
        5: 'May',
        6: 'June',
        7: 'July',
        8: 'August',
        9: 'September',
        10: 'October',
        11: 'November',
        12: 'December'
    }
    plt.figure(figsize=(12, 8))
    X = [month_map[i] for i in monthly_cnsmptn.index.month]
    wsolar = (monthly_sum['sum']) * charge_per_unit
    wosolar = (monthly_cnsmptn['sum']) * charge_per_unit
    X_axis = np.arange(len(X))
    plt.barh(X_axis, wosolar, label='consumption without solar')
    plt.barh(X_axis, wsolar, label='consumption with solar')
    plt.yticks(X_axis, X)
    plt.xlabel("Cost")
    plt.ylabel("Month")
    plt.title("Money saved on using solar panels")
    plt.legend()
    for i, (w1, w2) in enumerate(zip(wsolar, wosolar)):
        plt.text(300, i, str(round(w2, 2)) + " - " + str(round(w1, 2)) + " = " + str(round(abs(w1 - w2), 2)), ha='left',
                 va='center', color='white', weight='bold')
    plt.xlim(0, max(max(wsolar), max(wosolar)) + 5000)
    plt.gca().invert_yaxis()
    pdf.savefig()
    plt.close()
    pdf.close()
    pdf_bytes.seek(0)
    return pdf_bytes


def daily_consumption(generation_path, consumption_path, charge_per_unit):
    cnsmptn = pd.read_excel(consumption_path)
    cnsmptn.set_index('Date', inplace=True)
    cnsmptn.sort_index(ascending=True, inplace=True)
    cnsmptn = cnsmptn.sum(axis=1)
    cnsmptn = pd.DataFrame(cnsmptn, columns=['sum'])
    cnsmptn_monthly = {}
    for month in range(1, 13):
        monthly_data = cnsmptn[cnsmptn.index.month == month]
        cnsmptn_monthly[month] = monthly_data['sum']
    ogpivot = create_pivot(generation_path, consumption_path)

    def convert_negatives(x):
        if x < 0:
            return 0
        else:
            return x

    def convert_positives(x):
        if x > 0:
            return 0
        else:
            return x

    nonnegpivot = ogpivot.applymap(convert_negatives)
    nonpospivot = ogpivot.applymap(convert_positives)
    nonneg = nonnegpivot.sum(axis=1)
    nonpos = nonpospivot.sum(axis=1)
    nonpos = pd.DataFrame(nonpos, columns=['sum'])
    nonneg = pd.DataFrame(nonneg, columns=['sum'])
    nonpos_monthly = {}
    for month in range(1, 13):
        monthly_data = nonpos[nonpos.index.month == month]
        nonpos_monthly[month] = monthly_data['sum']
    nonneg_monthly = {}
    for month in range(1, 13):
        monthly_data = nonneg[nonneg.index.month == month]
        nonneg_monthly[month] = monthly_data['sum']
    pdf_bytes = BytesIO()
    pdf = PdfPages(pdf_bytes)
    month_names = list(calendar.month_name)[1:]
    for month in range(1, 13):
        plt.figure(figsize=(8, 16))
        X = range(1, len(nonneg_monthly[month]) + 1)
        nosolar = cnsmptn_monthly[month]  # taken from grid without solar
        consumed = nonneg_monthly[month]  # taken from grid with solar
        generated = nonpos_monthly[month]  # surplus generated from panel
        X_axis = np.arange(len(X))
        plt.barh(X_axis - 0.2, nosolar, 0.4, label='energy from grid without solar')
        plt.barh(X_axis - 0.2, consumed, 0.4, label='energy from grid with solar')
        plt.barh(X_axis + 0.2, abs(generated), 0.4, label='surplus energy to battery')
        plt.yticks(X_axis, X)
        plt.xlabel("Units")
        plt.ylabel(month_names[month - 1])
        plt.title("Energy taken from grid vs surplus energy generated")
        plt.legend()
        for i, (w1, w2, w3) in enumerate(zip(consumed, generated, nosolar)):
            plt.text(10, i - 0.2, str(round(w3, 2)) + " - " + str(round(w1, 2)), ha='left', va='center', color='white',
                     weight='bold')
            plt.text(max(w1, w3) + 10, i - 0.2, str(round(abs(w3 - w1), 2)), ha='left', va='center', color='black',
                     weight='bold')
            plt.text(abs(w2) + 10, i+0.2, str(round(abs(w2), 2)), ha='left', va='center')
        plt.xlim(0, max(max(consumed), max(generated), max(nosolar)) + 800)
        plt.ylim([-0.5 / 2 - 0.3, len(X) - 0.5 / 2 - 0.3])
        plt.gca().invert_yaxis()
        pdf.savefig()
        plt.close()
    for month in range(1, 13):
        plt.figure(figsize=(8, 16))
        X = range(1, len(nonneg_monthly[month]) + 1)
        nosolar = (cnsmptn_monthly[month]) * charge_per_unit  # taken from grid without solar
        consumed = (nonneg_monthly[month]) * charge_per_unit  # taken from grid
        generated = (nonpos_monthly[month]) * charge_per_unit  # surplus generated from panel
        X_axis = np.arange(len(X))
        plt.barh(X_axis - 0.2, nosolar, 0.4, label='cost of energy from grid without solar')
        plt.barh(X_axis - 0.2, consumed, 0.4, label='cost of energy taken from grid')
        plt.barh(X_axis + 0.2, abs(generated), 0.4, label='cost of surplus energy generated from panel')
        plt.yticks(X_axis, X)
        plt.xlabel("Cost")
        plt.ylabel(month_names[month - 1])
        plt.title("Cost of Energy taken from grid vs cost of surplus energy generated")
        plt.legend()
        for i, (w1, w2, w3) in enumerate(zip(consumed, generated, nosolar)):
            plt.text(10, i - 0.2, str(round(w3, 2)) + " - " + str(round(w1, 2)), ha='left', va='center', color='white',
                     weight='bold')
            plt.text(max(w1, w3) + 10, i - 0.2, str(round(abs(w3 - w1), 2)), ha='left', va='center', color='black',
                     weight='bold')
            plt.text(abs(w2) + 10, i + 0.2, str(round(abs(w2), 2)), ha='right', va='center')
        plt.xlim(0, max(max(consumed), max(generated)) + 1000)
        plt.ylim([-0.5 / 2 - 0.3, len(X) - 0.5 / 2 - 0.3])
        plt.gca().invert_yaxis()
        pdf.savefig()
        plt.close()
        pdf.close()
        pdf_bytes.seek(0)
        return pdf_bytes

# monthly_consumption('/content/Generation.xlsx', '/content/Consumption.xlsx', 0.47)
# daily_consumption('/content/Generation.xlsx', '/content/Consumption.xlsx', 0.47)
